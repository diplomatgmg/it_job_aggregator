services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      target: ${BUILD_TARGET}
    volumes:
      - ./frontend:/project/frontend
      - /project/frontend/node_modules
      - frontend_dist:/project/frontend/dist
      - static_volume:/project/backend/django_static/
    ports:
      - "80:80"
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    container_name: backend
    build:
      context: ./backend
      target: ${BUILD_TARGET}
    volumes:
      - ./backend:/project/backend
      - ./backend/venv:/project/backend/venv
      - static_volume:/project/backend/django_static/
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: postgres:16.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    env_file:
      - .env
    healthcheck:
      test: pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:7.2.5-alpine
    hostname: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  celery:
    restart: always
    container_name: celery
    build:
      context: ./backend
      target: ${BUILD_TARGET}
    command: celery -A core.celery.app worker -l debug
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      - app-network

  celery-beat:
    restart: always
    container_name: celery-beat
    build:
      context: ./backend
      target: ${BUILD_TARGET}
    env_file:
      - .env
    depends_on:
      - celery
    command: celery -A core.celery.app beat -l debug
    networks:
      - app-network

  flower:
    restart: always
    container_name: flower
    build:
      context: ./backend
      target: ${BUILD_TARGET}
    command: celery -A core.celery.app flower -l debug
    env_file:
      - .env
    depends_on:
      - celery
    ports:
      - "5555:5555"
    networks:
      - app-network


volumes:
  static_volume:
  frontend_dist:
  postgres_data:

networks:
  app-network:
    driver: bridge
